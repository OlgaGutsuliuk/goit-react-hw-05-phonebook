{"version":3,"sources":["Components/tellContacts/contactsForm/TelContacts.module.css","Components/tellContacts/contactsForm/ContactsForm.js","Components/tellContacts/contactsList/ContactsList.js","Components/tellContacts/telContactFilter/TelContactFilter.js","Components/tellContacts/TellContacts.js","Components/main/Main.js","Components/App.js","index.js","Components/tellContacts/contactsList/ContactsList.module.css"],"names":["module","exports","ContactsForm","state","contacts","name","filter","number","onHandleSubmit","e","preventDefault","props","addTelContact","setState","onHandleChange","target","value","className","style","contact_form","onSubmit","this","form_label","form_input","type","pattern","title","required","onChange","form_button","Component","ContactsList","telNumbers","deleteTelContact","list","map","telNumber","list_item","list_button","onClick","id","TelContactFilter","setFilter","propTepes","PropTypes","func","isRequired","string","TellContacts","telContacts","telContact","includes","alert","prevState","uuidv4","event","getFilterTelContact","toLowerCase","localStorage","getItem","parsedContacts","JSON","parse","prevProps","console","log","setItem","stringify","Main","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7014a3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_form\":\"TelContacts_contact_form__Cu-U9\",\"form_label\":\"TelContacts_form_label__2Ppbc\",\"form_input\":\"TelContacts_form_input__zFh_L\",\"form_button\":\"TelContacts_form_button__3ZGRn\"};","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport style from '../contactsForm/TelContacts.module.css'\n\nclass ContactsForm extends Component {\n  state = {\n    contacts: [],\n    name: \"\",\n    filter: \"\",\n    number: \"\"\n  };\n\n  onHandleSubmit = e => {\n    e.preventDefault();\n    this.props.addTelContact(this.state);\n    this.setState({\n      contacts: [],\n      name: \"\",\n      filter: \"\",\n      number: \"\"\n    });\n  };\n\n  onHandleChange = e => {\n    const {name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n  render() {\n    return (\n      <form className={style.contact_form} onSubmit={this.onHandleSubmit}>\n        <label className={style.form_label}>\n          Name:{\" \"}\n          <input className={style.form_input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.onHandleChange}\n            value={this.state.name}\n          />\n        </label>\n        <label className={style.form_label}>\n          Number:\n          <input className={style.form_input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.onHandleChange}\n            value={this.state.number}\n          />\n        </label>\n        <button className={style.form_button} type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  addTelContact: PropTypes.func.isRequired,\n  state: PropTypes.shape({\n    contacts: PropTypes.array.isRequired,\n    name: PropTypes.string.isRequired,\n    filter: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  })\n}\n","import React from 'react'\nimport PropsTypes from 'prop-types'\nimport style from '../contactsList/ContactsList.module.css'\n\nconst ContactsList = ({telNumbers, deleteTelContact }) => (\n    <ul className={style.list}>\n        { telNumbers.map(telNumber =>\n        (<li className={style.list_item} key={telNumber.id}>\n            <p>{telNumber.name}: </p>\n            <p>{telNumber.number}</p>\n             <button className={style.list_button} type=\"button\" onClick={deleteTelContact} id={telNumber.id}>Delete</button>\n            </li>\n    ))}    \n    </ul>\n)\n       \nexport default ContactsList;\n\nContactsList.propTypes = {\n    deleteTelContact: PropsTypes.func.isRequired,\n    telNumbers: PropsTypes.array.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from '../contactsForm/TelContacts.module.css'\n\nconst TelContactFilter = ({filter, setFilter}) => {\n    return (\n        <label className={style.form_label}> \n        Find contacts by name\n        <input className={style.form_input} type=\"text\" value={filter} onChange={setFilter}/>\n       </label>\n    );\n}\n\nexport default TelContactFilter;\n\nTelContactFilter.propTepes = {\n    setFilter: PropTypes.func.isRequired,\n    filter: PropTypes.string.isRequired\n}","import React, { Component } from \"react\";\nimport ContactsForm from \"./contactsForm/ContactsForm\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TelContactFilter from \"./telContactFilter/TelContactFilter\";\n\n\nclass TellContacts extends Component {\n  state = {\n    telContacts: [{id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n    {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n    {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n    {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},],\n     filter: \"\"\n  };\n  addTelContact = telContact => {\n      const searchSameName = this.state.telContacts\n      .map((telContacts) => telContacts.name)\n      .includes(telContact.name);\n\n    if (searchSameName) {\n     return alert(`${telContact.name} is already in contacts`);\n    }\n    this.setState(prevState => {\n      return {\n        telContacts: [...prevState.telContacts, {...telContact, id: uuidv4()}],\n      }\n    })\n  };\n\n  componentDidMount() {\n    const telContacts = localStorage.getItem(\"telContacts\");\n    const parsedContacts = JSON.parse(telContacts)\n    if (telContacts) {\n     this.setState({telContacts: parsedContacts })\n    }\n}\n\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.telContacts !== prevState.telContacts) {\n        console.log('обновилось');\n      localStorage.setItem(\"telContacts\", JSON.stringify(this.state.telContacts))\n    }\n  }\n\n  \n\n\n\ndeleteTelContact = event => {\n    const { id } = event.target;\n    this.setState({\n      telContacts: this.state.telContacts.filter(telContact => telContact.id !== id)\n    });\n  };\n    setFilter = (e) => {\n        const { value } = e.target\n        this.setState({\n            filter: value\n        })\n    }\ngetFilterTelContact = () => {\n    return this.state.telContacts.filter(telContact=>telContact.name.toLowerCase().includes(this.state.filter.toLowerCase()))} \n\n\n  render() {\n    return (\n        <>\n        <h2>Phonebook</h2>\n        <ContactsForm addTelContact={this.addTelContact} />\n        <h2>Contacts</h2>\n         <TelContactFilter filter={this.state.filter} setFilter={this.setFilter}/>\n       \n        <ContactsList telNumbers={this.getFilterTelContact()} deleteTelContact={this.deleteTelContact}/>\n      </>\n    );\n  }\n}\n\nexport default TellContacts;\n","import React from 'react'\nimport TellContacts from '../tellContacts/TellContacts';\n\nconst Main = () => {\n    return (\n    <>\n     <TellContacts />\n    </>\n    );\n}\n\nexport default Main;","import React from 'react'\nimport Main from './main/Main';\n\nconst App = () => {\n    return (\n    <>\n    <Main />\n    </>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__TYo8H\",\"list_item\":\"ContactsList_list_item__1dTvg\",\"list_button\":\"ContactsList_list_button__MZa34\"};"],"sourceRoot":""}